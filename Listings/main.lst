C51 COMPILER V9.60.7.0   MAIN                                                              01/28/2025 20:38:55 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <reg51.h>
   2          // RSA Functions
   3          unsigned char primality_test(unsigned int prime_candidate);
   4          unsigned long square_mul(unsigned long number, unsigned long mod, unsigned long power);
   5          unsigned long Extended_Eculdian_Algorthim(unsigned long phi, unsigned long e);
   6          unsigned long gcd(unsigned long n1, unsigned long n2);
   7          unsigned long Encryption_Decryption(unsigned long public_private_key, unsigned long n, unsigned int plain_
             -cipher_text);
   8          //========================================================================================================
             -==========
   9          // UART Functions
  10          void serial_init();
  11          void send_data_serial(char data_t);
  12          char recive_data_serial(void);
  13          unsigned long UART_ReceiveNumber(void);
  14          void UART_SendString(char *str);
  15          void intToASCII(unsigned long number, char *asciiString);
  16          //========================================================================================================
             -==========
  17          // Variables
  18          unsigned int p, q; //p and q is prime numbers
  19          unsigned char co_prime_check; // variable used to store return value of primality test
  20          unsigned char public_key_check; // variable used to store return value of gcd check for public key with ph
             -i
  21          unsigned long phi, n, public_key, private_key; //RSA main variables 
  22          unsigned int cipher_plain_text; // Cipher text variable
  23           // plain text variable
  24          unsigned char temp[6]; //variable used to show plain text and cipher text or any other value in Uart Termi
             -nal as ascii value
  25          //========================================================================================================
             -==========
  26          int main() {
  27   1          serial_init(); //initialization of serial
  28   1          while (1) {
  29   2               //primality test to check if p and q is prime numbers
  30   2              do{
  31   3                UART_SendString("Enter p (prime): ");
  32   3                p = UART_ReceiveNumber(); // Enter P prime number
  33   3                
  34   3                UART_SendString("Enter q (prime): ");
  35   3                q = UART_ReceiveNumber(); // Enter q prime number
  36   3                co_prime_check = (primality_test(p) & primality_test(q));
  37   3              }while(co_prime_check != 1);
  38   2              co_prime_check = 0; //so code can work again and we can enter next p and q
  39   2              
  40   2              phi = (p - 1) *(q - 1); // phi calculation
  41   2              n = p * q; // n calculation
  42   2              
  43   2               //gcd test to check if public key is correct or not
  44   2              do{
  45   3                UART_SendString("Enter public key (e): ");
  46   3                public_key = UART_ReceiveNumber(); //Enter public key (e)
  47   3                public_key_check = gcd(phi,public_key);
  48   3              }while(public_key_check !=1);
C51 COMPILER V9.60.7.0   MAIN                                                              01/28/2025 20:38:55 PAGE 2   

  49   2              public_key_check = 0; // so code can work again and we can enter next public key
  50   2              
  51   2              UART_SendString("Enter plain text: ");
  52   2              cipher_plain_text = UART_ReceiveNumber(); // enter plain text required to encrypt X       
  53   2              
  54   2              private_key = Extended_Eculdian_Algorthim(phi, public_key); //Generate private key (d) used for de
             -cryption Y
  55   2              
  56   2              cipher_plain_text = Encryption_Decryption(public_key, n, cipher_plain_text); //encryption plain te
             -xt with e and store it in cipher text
  57   2              intToASCII(cipher_plain_text, temp); // convert number from integar to Ascii
  58   2              UART_SendString("Encryption: "); //send string text to uart
  59   2              UART_SendString(temp); //show cipher text in uart terminal
  60   2              UART_SendString("\r\n"); //make new line
  61   2      
  62   2              cipher_plain_text = Encryption_Decryption(private_key, n, cipher_plain_text);//decryption cipher t
             -ext with d and store it in plain text
  63   2              intToASCII(cipher_plain_text, temp); // convert number from integar to Ascii
  64   2              UART_SendString("Decryption: "); //send string text to uart
  65   2              UART_SendString(temp); //show plain text in uart terminal
  66   2              UART_SendString("\r\n"); //make new line
  67   2              
  68   2          }
  69   1      }
  70          //========================================================================================================
             -==========
  71          // RSA Functions
  72          
  73          unsigned char primality_test(unsigned int prime_candidate)
  74          {
  75   1          unsigned char a = 2; // value of a we will use for fermat test
  76   1          unsigned int reminder = 1; //reminder value we check to know if condition is true or not
  77   1          unsigned char i; //for loop itreation
  78   1      
  79   1          unsigned char security_test = 0; // number of test i need to check
  80   1          for(i = 0; i <= 5;i++)
  81   1          {
  82   2              reminder = square_mul(a,prime_candidate,(prime_candidate - 1)); // a^(p~-1) mod p~ = 1 mod p~ 
  83   2              if (reminder ==1)// if reminder is 1 then condition in comment in line 99
  84   2              {
  85   3                security_test++; // 1 test passed correct
  86   3                a++;  // next value of a to test
  87   3              }
  88   2              else
  89   2              { // test failed due to only one failed
  90   3                break; //break for loop
  91   3              }
  92   2          }
  93   1          if(security_test >= 5) // check if test passed 5 times or more else test failed
  94   1          {
  95   2            return 1; //test passed
  96   2          }
  97   1          else
  98   1          {
  99   2            return 0; //test failed
 100   2          }
 101   1      }
 102          
 103          unsigned long square_mul(unsigned long number, unsigned long m, unsigned long power) {
 104   1          unsigned int result = 1;
 105   1          while (power) {
 106   2              if (power & 1) result = (result * number) % m;
C51 COMPILER V9.60.7.0   MAIN                                                              01/28/2025 20:38:55 PAGE 3   

 107   2              number = (number * number) % m;
 108   2              power >>= 1;
 109   2          }
 110   1          return result;
 111   1      }
 112          
 113          // ex 5 mod 3 ==> (5 % 3 + 3) % 3 ==> (2 + 3) % 3 ==> 5 % 3 ==> 2 mod 3 
 114          // ex -5 mod 3 ==> (-5 % 3 + 3) % 3 ==> (-2 + 3) % 3 ==> (1) % 3 ==> 1 mod 3
 115          
 116          //EEA function
 117          unsigned long Extended_Eculdian_Algorthim(unsigned long phi, unsigned long e) {
 118   1          // Initialize variables:
 119   1          // r1 and r2 are used for calculating the greatest common divisor (GCD) using the Euclidean algorithm.
 120   1          signed int r1 = phi, r2 = e, t1 = 0, t2 = 1, temp;
 121   1          while (r2) {
 122   2              signed int q = r1 / r2;
 123   2              temp = r1 % r2;
 124   2              r1 = r2;
 125   2              r2 = temp;
 126   2      
 127   2              temp = t1 - q * t2;
 128   2              t1 = t2;
 129   2              t2 = temp;
 130   2          }
 131   1          return (t1 < 0) ? t1 + phi : t1;
 132   1      }
 133          
 134          //Encryption and Decryption Function
 135          unsigned long Encryption_Decryption(unsigned long public_private_key, unsigned long n, unsigned int plain_
             -cipher_text) {
 136   1          // Initialize result to the plain or cipher text input.
 137   1          unsigned long result = 1;
 138   1          // Declare a loop counter variable.
 139   1          result = square_mul(plain_cipher_text,n,public_private_key);
 140   1          // Return the final result, which is the encryption or decryption output.
 141   1          return result;
 142   1      }
 143          
 144          
 145          unsigned long gcd(unsigned long n1, unsigned long n2) // 27, 21 as example inputs
 146          {
 147   1          while (n2) {
 148   2              unsigned int temp = n2;
 149   2              n2 = n1 % n2;
 150   2              n1 = temp;
 151   2          }
 152   1          return n1;
 153   1      }
 154          
 155          //========================================================================================================
             -==========
 156          // UART Functions
 157          void serial_init(void) {
 158   1          TMOD = 0x20; TH1 = 0xFD; SCON = 0x50; TR1 = 1;
 159   1      }
 160          
 161          void send_data_serial(char data_t) {
 162   1          TI = 0;
 163   1          SBUF = data_t;
 164   1          while (!TI);
 165   1          TI = 0;
 166   1      }
C51 COMPILER V9.60.7.0   MAIN                                                              01/28/2025 20:38:55 PAGE 4   

 167          
 168          char recive_data_serial(void) {
 169   1          while (!RI);
 170   1          RI = 0;
 171   1          return SBUF;
 172   1      }
 173          
 174          void UART_SendString(char *str) {
 175   1          while (*str) send_data_serial(*str++);
 176   1      }
 177          
 178          unsigned long UART_ReceiveNumber(void) {
 179   1          char buffer[10];          // Buffer to store received characters
 180   1          char c;                   // Character received from UART
 181   1          char index = 0;            // Current index in the buffer
 182   1          unsigned int number = 0; // Final integer value
 183   1          char i;
 184   1          while (1) {
 185   2              c = recive_data_serial(); // Receive a character from UART
 186   2              if (c == '\r') break;     // Stop on carriage return
 187   2              if (index < sizeof(buffer) - 1) buffer[index++] = c; // Store valid characters
 188   2          }
 189   1      
 190   1          buffer[index] = '\0'; // Null-terminate the buffer
 191   1      
 192   1          // Convert the ASCII string to an integer
 193   1          for (i = 0; buffer[i] >= '0' && buffer[i] <= '9'; i++) {
 194   2              number = number * 10 + (buffer[i] - '0');
 195   2          }
 196   1      
 197   1          return number;
 198   1      }
 199          
 200          void intToASCII(unsigned long number, char *asciiString) {
 201   1          char index = 0;
 202   1          char i = 0;
 203   1          if (number == 0) {
 204   2              asciiString[index++] = '0'; // Handle zero case
 205   2          } else {
 206   2              // Extract digits in reverse order
 207   2              while (number > 0) {
 208   3                  asciiString[index++] = (number % 10) + '0';
 209   3                  number /= 10;
 210   3              }
 211   2      
 212   2              // Reverse the string to correct order
 213   2              for (i = 0; i < index / 2; i++) {
 214   3                  char temp = asciiString[i];
 215   3                  asciiString[i] = asciiString[index - i - 1];
 216   3                  asciiString[index - i - 1] = temp;
 217   3              }
 218   2          }
 219   1      
 220   1          asciiString[index] = '\0'; // Null-terminate the string
 221   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1308    ----
   CONSTANT SIZE    =    107    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   MAIN                                                              01/28/2025 20:38:55 PAGE 5   

   DATA SIZE        =     30      76
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
